#include "TR_DataObject.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_DataObject
#endif

TR_DataObject::TR_DataObject(TR_Types::DataObjectId_t id) :
  _id(id)
{
}

size_t TR_DataObject::g_dataObjectSizeTable[] =
{
  sizeof(TR_DataObject),
  sizeof(TR_NodeDataObject),
  sizeof(TR_ChannelDataObject),
  sizeof(TR_BezierCurveDataObject),
  sizeof(TR_BezierPointDataObject),
  sizeof(TR_CatmullCurveDataObject),
  sizeof(TR_CatmullPointDataObject),
  sizeof(TR_LinearCurveDataObject),
  sizeof(TR_LinearPointDataObject),
  sizeof(TR_AnimatedPivotDataObject),
  sizeof(TR_PivotPointDataObject),
  sizeof(TR_DrawingAnimationDataObject),
  sizeof(TR_DrawingDataObject),
  sizeof(TR_FloatDataObject),
  sizeof(TR_StringDataObject),
  sizeof(TR_EffectDataObject)
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_NodeDataObject
#endif

TR_NodeDataObject::TR_NodeDataObject() :
  TR_DataObject(Id()),
  _nameOffset(TR_Types::g_nullOffset),
  _channelDataOffset(TR_Types::g_nullOffset),
  _drawingDataOffset(TR_Types::g_nullOffset),
  _effectDataOffset(TR_Types::g_nullOffset),
  _brotherDataOffset(TR_Types::g_nullOffset),
  _childDataOffset(TR_Types::g_nullOffset)
{
}

TR_Types::DataObjectId_t TR_NodeDataObject::Id()
{
  return TR_Types::eNodeData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_EffectDataObject
#endif
TR_EffectDataObject::TR_EffectDataObject() :
  TR_DataObject(Id()),
  _effectId(TR_Types::eNoop),
  _matteDataOffset(TR_Types::g_nullOffset)
{
}

TR_Types::DataObjectId_t TR_EffectDataObject::Id()
{
  return TR_Types::eEffectData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_DeformationEffectDataObject
#endif
// TR_DeformationEffectDataObject::TR_DeformationEffectDataObject() :
//   TR_DataObject(Id()),
//   _boneDataOffset(TR_Types::g_nullOffset)
// {
// }
// 
// TR_Types::DataObjectId_t TR_NodeDataObject::Id()
// {
//   return TR_Types::eDeformationEffectData;
// }

#if 0
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_DeformationBoneDataObject
#endif
TR_DeformationBoneDataObject::TR_DeformationBoneDataObject() :
  TR_DataObject(TR_Types::eDeformationBoneData),
  _brotherDataOffset(TR_Types::g_nullOffset),
  _childDataOffset(TR_Types::g_nullOffset)
{
  for ( unsigned i = 0; i < TR_Types::MAX_BONE_CHANNELS ; ++i )
  {
    _channels[i] = TR_Types::g_nullOffset;
  }
}
#endif


#if 0
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_AnimationDataObject
#endif

TR_AnimationDataObject::TR_AnimationDataObject() :
  TR_DataObject(TR_Types::eAnimationData)
{
  for ( unsigned i = 0; i < TR_Types::MAX_CURVE_CHANNELS ; ++i )
  {
    _channels[i] = TR_Types::g_nullOffset;
  }
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_ChannelDataObject
#endif

TR_ChannelDataObject::TR_ChannelDataObject() :
  TR_DataObject(Id()),
  _channelType(TR_Types::eNullChannel),
  _linkedDataOffset(TR_Types::g_nullOffset),
  _nextChannelDataOffset(TR_Types::g_nullOffset)
{
}

TR_Types::DataObjectId_t TR_ChannelDataObject::Id()
{
  return TR_Types::eChannelData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_BezierCurveDataObject
#endif

TR_BezierCurveDataObject::TR_BezierCurveDataObject() :
  TR_DataObject(Id()),
  _nPoints(0)
{
}

TR_Types::DataObjectId_t TR_BezierCurveDataObject::Id()
{
  return TR_Types::eBezierCurveData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_BezierPointDataObject
#endif

TR_BezierPointDataObject::TR_BezierPointDataObject() :
  TR_DataObject(Id()),
  _x(0.0f),
  _y(0.0f),
  _leftx(0.0f),
  _lefty(0.0f),
  _rightx(0.0f),
  _righty(0.0f),
  _constSeg(false)
{
}


TR_Types::DataObjectId_t TR_BezierPointDataObject::Id()
{
  return TR_Types::eBezierPointData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_CatmullCurveDataObject
#endif

TR_CatmullCurveDataObject::TR_CatmullCurveDataObject() :
  TR_DataObject(Id()),
  _scaleX(1.0f),
  _scaleY(1.0f),
  _scaleZ(1.0f),
  _nPoints(0)
{
}


TR_Types::DataObjectId_t TR_CatmullCurveDataObject::Id()
{
  return TR_Types::eCatmullCurveData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_CatmullPointDataObject
#endif

TR_CatmullPointDataObject::TR_CatmullPointDataObject() :
  TR_DataObject(Id()),
  _frame(0.0f),
  _x(0.0f),
  _y(0.0f),
  _z(0.0f),
  _tension(0.0f),
  _continuity(0.0f),
  _bias(0.0f),
  _distance(0.0f)
{
}


TR_Types::DataObjectId_t TR_CatmullPointDataObject::Id()
{
  return TR_Types::eCatmullPointData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_LinearCurveDataObject
#endif

TR_LinearCurveDataObject::TR_LinearCurveDataObject() :
  TR_DataObject(Id()),
  _nPoints(0)
{
}

TR_Types::DataObjectId_t TR_LinearCurveDataObject::Id()
{
  return TR_Types::eLinearCurveData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_LinearPointDataObject
#endif

TR_LinearPointDataObject::TR_LinearPointDataObject() :
  TR_DataObject(Id()),
  _x(0.0f),
  _y(0.0f)
{
}

TR_Types::DataObjectId_t TR_LinearPointDataObject::Id()
{
  return TR_Types::eLinearPointData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_AnimatedPivotDataObject
#endif

TR_AnimatedPivotDataObject::TR_AnimatedPivotDataObject() :
  TR_DataObject(Id()),
  _nPoints(0)
{
}

TR_Types::DataObjectId_t TR_AnimatedPivotDataObject::Id()
{
  return TR_Types::eAnimatedPivotData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_PivotPointDataObject
#endif

TR_PivotPointDataObject::TR_PivotPointDataObject() :
  TR_DataObject(Id()),
  _frame(0.0f),
  _x(0.0f),
  _y(0.0f),
  _z(0.0f)
{
}

TR_Types::DataObjectId_t TR_PivotPointDataObject::Id()
{
  return TR_Types::ePivotPointData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_DrawingAnimationDataObject
#endif

TR_DrawingAnimationDataObject::TR_DrawingAnimationDataObject() :
  TR_DataObject(Id())
{
}

TR_Types::DataObjectId_t TR_DrawingAnimationDataObject::Id()
{
  return TR_Types::eDrawingAnimationData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_DrawingDataObject
#endif

TR_DrawingDataObject::TR_DrawingDataObject() :
  TR_DataObject(Id()),
  _frame(1.0f),
  _repeat(0.0f),
  _drawingNameOffset(TR_Types::g_nullOffset)
{
}

TR_Types::DataObjectId_t TR_DrawingDataObject::Id()
{
  return TR_Types::eDrawingData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_FloatDataObject
#endif

TR_FloatDataObject::TR_FloatDataObject() :
  TR_DataObject(Id()),
  _value(0.0f)
{
}

TR_Types::DataObjectId_t TR_FloatDataObject::Id()
{
  return TR_Types::eFloatData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if 0
#pragma mark - TR_StringDataObject
#endif

TR_StringDataObject::TR_StringDataObject() :
  TR_DataObject(Id()),
  _nChars(0)
{
}

TR_Types::DataObjectId_t TR_StringDataObject::Id()
{
  return TR_Types::eStringData;
}
