<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
	xmlns:noesis="clr-namespace:Noesis.Samples"
	x:Class="Noesis.Samples.ControlGallery"
    FontFamily="Resources/Fonts/#Roboto"
	d:DesignWidth="1280" d:DesignHeight="720">

    <UserControl.Resources>
        <Geometry x:Key="SelectorExpandGeometry">M2,2L8,2M2,5L8,5M2,8L8,8</Geometry>
        <SolidColorBrush x:Key="GlyphFg" Color="White"/>
        <Color x:Key="ButtonDarkNormalBg">#FF175B97</Color>
        <Color x:Key="ButtonNormalBg">#FF286CA8</Color>
        <Color x:Key="ButtonDarkOverBg">#FF12548F</Color>
        <Color x:Key="ButtonOverBg">#FF2F76B5</Color>
        <Color x:Key="ButtonDarkPressBg">#FF174E7E</Color>
        <Color x:Key="ButtonPressBg">#FF1F629C</Color>
        <Color x:Key="ItemNormalBg">#00286CA8</Color>
        <Color x:Key="ItemOverBg">#40286CA8</Color>
        <Color x:Key="ItemSelectBg">#80286CA8</Color>

        <Color x:Key="NormalFgColor">#FFC9CCCF</Color>
        <Color x:Key="NormalBgColor">#FF4D555B</Color>
        <Color x:Key="NormalDarkBgColor">#FF464E53</Color>
        <Color x:Key="NormalBdColor">#FF31373A</Color>
        <Color x:Key="NormalDarkBdColor">#FF2F3437</Color>
        <Color x:Key="CheckBgColor">#FF38A3DC</Color>
        <GradientStopCollection x:Key="NormalBgRamp">
            <GradientStop Color="#FF545D63" Offset="0"/>
            <GradientStop Color="{StaticResource NormalBgColor}" Offset="0.5"/>
            <GradientStop Color="{StaticResource NormalDarkBgColor}" Offset="1"/>
        </GradientStopCollection>
        <GradientStopCollection x:Key="NormalBdRamp">
            <GradientStop Color="#FF33393D" Offset="0"/>
            <GradientStop Color="{StaticResource NormalBdColor}" Offset="0.5"/>
            <GradientStop Color="{StaticResource NormalDarkBdColor}" Offset="1"/>
        </GradientStopCollection>
        <SolidColorBrush x:Key="NormalFgBrush" Color="{StaticResource NormalFgColor}"/>
        <LinearGradientBrush x:Key="NormalBgBrush" EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBgRamp}"/>
        <LinearGradientBrush x:Key="NormalBdBrush" EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBdRamp}"/>

        <LinearGradientBrush x:Key="SelectorBg" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#7F000000" Offset="0"/>
            <GradientStop Color="#4C000000" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="TD_Shadow" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#59000000" Offset="0"/>
            <GradientStop Color="#00000000" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="DT_Shadow" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#59000000" Offset="1"/>
            <GradientStop Color="#00000000"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="LR_Shadow" EndPoint="1,0.5" StartPoint="0,0.5">
            <GradientStop Color="#3F000000" Offset="0"/>
            <GradientStop Color="#00000000" Offset="1"/>
        </LinearGradientBrush>

        <Style x:Key="NoesisControlStyle">
            <Setter Property="Control.Background" Value="{StaticResource NormalBgBrush}"/>
            <Setter Property="Control.BorderBrush" Value="{StaticResource NormalBdBrush}"/>
            <Setter Property="Control.BorderThickness" Value="1"/>
            <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Control.Padding" Value="0"/>
            <Setter Property="Control.IsTabStop" Value="True"/>
            <Setter Property="Control.OverridesDefaultStyle" Value="False"/>
        </Style>

        <!-- ScrollBarLineButton Style -->
        <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource NoesisControlStyle}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Delay" Value="250"/>
            <Setter Property="Interval" Value="100"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="BaseBorder"
                            Background="Transparent">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                        <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
                                        <VisualTransition GeneratedDuration="0" To="Pressed"/>
                                        <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="CheckArrow">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="CheckArrow">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Path x:Name="CheckArrow"
                                Stretch="Fill"
                                Margin="3"
                                Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" UseLayoutRounding="False">
                                <Path.Fill>
                                    <SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
                                </Path.Fill>
                            </Path>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- ScrollBarPageButton Style -->
        <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource NoesisControlStyle}">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
                
        <!-- VerticalScrollBarThumb Style -->
        <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}" BasedOn="{StaticResource NoesisControlStyle}">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                        <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
                                        <VisualTransition GeneratedDuration="0" To="Pressed"/>
                                        <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
                                        <VisualTransition GeneratedDuration="0:0:0.2" To="Disabled"/>
                                        <VisualTransition From="Disabled" GeneratedDuration="0:0:0.2"/>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.9"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="BaseBorder" Background="Transparent"/>
                            <Border x:Name="DragBorder" CornerRadius="1" Margin="4,0">
                                <Border.Background>
                                    <SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0.3"/>
                                </Border.Background>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- VerticalScrollBar Template -->
        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid
                Background="Transparent"
                MinWidth="{TemplateBinding MaxWidth}"
                MaxWidth="{TemplateBinding MaxWidth}">
                <Grid.RowDefinitions>
                    <RowDefinition MinHeight="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxWidth}"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition MinHeight="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxWidth}"/>
                </Grid.RowDefinitions>
                <Track x:Name="PART_Track" Grid.Row="0" Grid.RowSpan="3" Margin="0,1" Orientation="Vertical" IsDirectionReversed="True">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Style="{StaticResource VerticalScrollBarThumb}" IsEnabled="False"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton x:Name="UpLineButton"
                    Grid.Row="0"
                    Style="{StaticResource ScrollBarLineButton}"
                    Command="ScrollBar.LineUpCommand">
                    <Geometry>M 0 4 L 8 4 L 4 0 Z</Geometry>    
                </RepeatButton>
                <RepeatButton x:Name="DownLineButton"
                    Grid.Row="2"
                    Style="{StaticResource ScrollBarLineButton}"
                    Command="ScrollBar.LineDownCommand">
                    <Geometry>M 0 0 L 4 4 L 8 0 Z</Geometry>    
                </RepeatButton>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="Thumb" Property="IsEnabled" Value="True"/>
                </Trigger>
                <Trigger SourceName="UpLineButton" Property="IsMouseOver" Value="True">
                    <Setter TargetName="Thumb" Property="IsEnabled" Value="False"/>
                </Trigger>
                <Trigger SourceName="DownLineButton" Property="IsMouseOver" Value="True">
                    <Setter TargetName="Thumb" Property="IsEnabled" Value="False"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        <!-- ScrollBar Style -->
        <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource NoesisControlStyle}">
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="MaxWidth" Value="15"/>
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- ScrollViewer Style -->
        <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource NoesisControlStyle}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="MinWidth" Value="15"/>
            <Setter Property="MinHeight" Value="15"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid Background="{TemplateBinding Background}">
                            
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
    
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
    
                            <ScrollContentPresenter
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                Margin="{TemplateBinding Padding}"/>
                            
                            <!-- The visibility of the ScrollBars is controlled by the implementation of the control -->
                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                                Grid.Column="0"
                                Grid.ColumnSpan="2"
                                Grid.Row="1"
                                Orientation="Horizontal"
                                MaxHeight="{TemplateBinding MinHeight}"
                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ViewportSize="{TemplateBinding ViewportWidth}"
                                Minimum="0"
                                Maximum="{TemplateBinding ScrollableWidth}"/>
                            <ScrollBar x:Name="PART_VerticalScrollBar"
                                Grid.Column="1"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Orientation="Vertical"
                                MaxWidth="{TemplateBinding MinWidth}"
                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                ViewportSize="{TemplateBinding ViewportHeight}"
                                Minimum="0"
                                Maximum="{TemplateBinding ScrollableHeight}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="PART_HorizontalScrollBar" Property="IsMouseOver" Value="True">
                                <Setter TargetName="PART_HorizontalScrollBar" Property="Panel.ZIndex" Value="1"/>
                            </Trigger>
                            <Trigger SourceName="PART_VerticalScrollBar" Property="IsMouseOver" Value="True">
                                <Setter TargetName="PART_VerticalScrollBar" Property="Panel.ZIndex" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="SelectorExpandTemplate" TargetType="{x:Type ToggleButton}">
            <Border Margin="0,0,-8,-8" CornerRadius="0,0,8,0" Padding="0,0,8,8">
                <Border.Background>
                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                        <GradientStop Color="#00000000" Offset="0.4"/>
                        <GradientStop Color="#19000000" Offset="0.7"/>
                        <GradientStop Color="#0C000000" Offset="1"/>
                    </LinearGradientBrush>
                </Border.Background>
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.2" To="Normal"/>
                            <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.1" To="Pressed"/>
                            <VisualTransition From="Normal" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Normal"/>
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonOverBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonPressBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled"/>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Border x:Name="Bd">
                    <Border.Background>
                        <SolidColorBrush Color="{StaticResource ButtonNormalBg}"/>
                    </Border.Background>
                    <ContentPresenter
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						Margin="{TemplateBinding Padding}"/>
                </Border>
            </Border>
        </ControlTemplate>
        <ControlTemplate x:Key="SelectorTemplate" TargetType="{x:Type TreeView}">
            <Grid>
                <Grid Width="{TemplateBinding MinWidth}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle x:Name="ScrollBarSpace" Grid.Column="0"/>
                </Grid>
                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto"
				MinWidth="{Binding ActualWidth, ElementName=ScrollBarSpace}" MinHeight="{Binding ActualWidth, ElementName=ScrollBarSpace}">
                    <StackPanel IsItemsHost="True"/>
                </ScrollViewer>
            </Grid>
        </ControlTemplate>
        <Style x:Key="SelectorStyle" TargetType="{x:Type TreeView}">
            <Setter Property="Foreground" Value="{StaticResource GlyphFg}"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Template" Value="{StaticResource SelectorTemplate}"/>
        </Style>
        <ControlTemplate x:Key="SelectorItemExpanderTemplate" TargetType="{x:Type ToggleButton}">
            <Border x:Name="Bd">
                <Border.Background>
                    <SolidColorBrush Color="{StaticResource ButtonNormalBg}"/>
                </Border.Background>
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition From="Normal" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.2" To="Normal"/>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.1" To="Pressed">
                                <Storyboard/>
                            </VisualTransition>
                            <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                            <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2" To="Normal"/>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Normal"/>
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonOverBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonPressBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled"/>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
            </Border>
        </ControlTemplate>
        <Style x:Key="SelectorItemExpanderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template" Value="{StaticResource SelectorItemExpanderTemplate}"/>
        </Style>
        <ControlTemplate x:Key="SampleItemTemplate" TargetType="{x:Type TreeViewItem}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="ExpansionStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition From="Collapsed" GeneratedDuration="0:0:0.2" To="Expanded">
                                <VisualTransition.GeneratedEasingFunction>
                                    <SineEase EasingMode="EaseOut"/>
                                </VisualTransition.GeneratedEasingFunction>
                            </VisualTransition>
                            <VisualTransition From="Expanded" GeneratedDuration="0:0:0.2" To="Collapsed">
                                <VisualTransition.GeneratedEasingFunction>
                                    <SineEase EasingMode="EaseOut"/>
                                </VisualTransition.GeneratedEasingFunction>
                            </VisualTransition>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Expanded"/>
                        <VisualState x:Name="Collapsed">
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ItemsHostBd">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="HasItemsStates">
                        <VisualState x:Name="HasItems">
                            <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Expander">
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                                <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="Bd">
                                    <DiscreteBooleanKeyFrame KeyTime="0" Value="False"/>
                                </BooleanAnimationUsingKeyFrames>
                                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="PART_Header">
                                    <EasingThicknessKeyFrame KeyTime="0" Value="4,6"/>
                                </ThicknessAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="NoItems"/>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <ToggleButton x:Name="Expander" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
					Style="{StaticResource SelectorItemExpanderStyle}" Visibility="Collapsed"/>
                <Border x:Name="Bd" Height="{TemplateBinding MinHeight}">
                    <Border.Background>
                        <SolidColorBrush Color="{StaticResource ItemNormalBg}"/>
                    </Border.Background>
                    <Viewbox Stretch="UniformToFill">
                        <Grid Width="2000">
                            <TextBlock x:Name="PART_Header" Text="{TemplateBinding Header}" Margin="12,7" HorizontalAlignment="Left"/>
                        </Grid>
                    </Viewbox>
                </Border>
                <Border x:Name="ItemsHostBd" Grid.Row="1" Background="{StaticResource SelectorBg}">
                    <Border.LayoutTransform>
                        <ScaleTransform/>
                    </Border.LayoutTransform>
                    <Grid Margin="0,0,0,4">
                        <ItemsPresenter x:Name="ItemsHost"/>
                        <Rectangle Width="8" HorizontalAlignment="Left">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{StaticResource ButtonPressBg}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <!--Rectangle Width="8" HorizontalAlignment="Right">
							<Rectangle.Fill>
								<SolidColorBrush Color="{StaticResource ButtonPressBg}"/>
							</Rectangle.Fill>
						</Rectangle-->
                    </Grid>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" TargetName="Bd">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource ItemSelectBg}"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True" SourceName="Bd">
                    <Setter Property="Background" TargetName="Bd">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource ItemOverBg}"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="SampleItemStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Foreground" Value="{StaticResource GlyphFg}"/>
            <Setter Property="Template" Value="{StaticResource SampleItemTemplate}"/>
        </Style>
        <ControlTemplate x:Key="SelectorComboExpanderTemplate" TargetType="{x:Type ToggleButton}">
            <Border x:Name="Bd">
                <Border.Background>
                    <SolidColorBrush Color="{StaticResource ButtonDarkNormalBg}"/>
                </Border.Background>
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition From="Normal" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.2" To="Normal"/>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.1" To="Pressed">
                                <Storyboard/>
                            </VisualTransition>
                            <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                            <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2" To="Normal"/>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Normal"/>
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonDarkOverBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bd">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonDarkPressBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled"/>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
            </Border>
        </ControlTemplate>
        <Style x:Key="SelectorComboExpanderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template" Value="{StaticResource SelectorComboExpanderTemplate}"/>
        </Style>
        <ControlTemplate x:Key="StyleSelectorTemplate" TargetType="{x:Type ComboBox}">
            <ControlTemplate.Resources>
                <Storyboard x:Key="OnDropDown">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="ExpanderArrow">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="2"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0">
                            <EasingDoubleKeyFrame.EasingFunction>
                                <SineEase EasingMode="EaseOut"/>
                            </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="StyleIcon">
                        <EasingColorKeyFrame KeyTime="0:0:0.1" Value="#FF90CFFF"/>
                    </ColorAnimationUsingKeyFrames>
                </Storyboard>
                <Storyboard x:Key="OnDropUp">
                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="StyleIcon">
                        <EasingColorKeyFrame KeyTime="0:0:0.3" Value="White">
                            <EasingColorKeyFrame.EasingFunction>
                                <SineEase EasingMode="EaseOut"/>
                            </EasingColorKeyFrame.EasingFunction>
                        </EasingColorKeyFrame>
                    </ColorAnimationUsingKeyFrames>
                </Storyboard>
            </ControlTemplate.Resources>
            <Grid Height="{TemplateBinding MinHeight}">
                <ToggleButton x:Name="Expander" IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
					Style="{StaticResource SelectorComboExpanderStyle}"/>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <Border Grid.Column="0" IsHitTestVisible="False">
                        <Viewbox>
                            <Path x:Name="StyleIcon" Data="M0,0L4,0 4,4 0,4zM6,3L20,3 20,4 6,4z M4,6L8,6 8,10 4,10zM10,9L20,9 20,10 10,10zM4,12L8,12 8,16 4,16M10,15L20,15 20,16 10,16z"
							 Fill="White" Margin="6,14,4,14"/>
                        </Viewbox>
                    </Border>
                    <Border Grid.Column="1" IsHitTestVisible="False">
                        <Viewbox Stretch="UniformToFill">
                            <Grid Width="2000">
                                <TextBlock Text="{TemplateBinding SelectionBoxItem}" Margin="4,6"/>
                            </Grid>
                        </Viewbox>
                    </Border>
                </Grid>
                <Border IsHitTestVisible="False" HorizontalAlignment="Right" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}">
                    <Viewbox>
                        <Path x:Name="ExpanderArrow" Data="M3,4L5,7 7,4" Stroke="{StaticResource GlyphFg}" Stretch="None" Width="10" Height="10" Margin="1" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Viewbox>
                </Border>
                <Popup IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True">
                    <Grid Width="{Binding ActualWidth, ElementName=Expander}">
                        <Border Margin="0,0,0,8">
                            <Border.Background>
                                <SolidColorBrush Color="{StaticResource ButtonNormalBg}"/>
                            </Border.Background>
                        </Border>
                        <StackPanel Background="{StaticResource SelectorBg}" IsItemsHost="True" Margin="0,0,0,8"/>
                        <Rectangle Height="8" VerticalAlignment="Bottom" Fill="{StaticResource TD_Shadow}"/>
                    </Grid>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsDropDownOpen" Value="True">
                    <Trigger.ExitActions>
                        <BeginStoryboard x:Name="OnDropUp_BeginStoryboard" Storyboard="{StaticResource OnDropUp}"/>
                    </Trigger.ExitActions>
                    <Trigger.EnterActions>
                        <BeginStoryboard x:Name="OnDropDown_BeginStoryboard" Storyboard="{StaticResource OnDropDown}"/>
                    </Trigger.EnterActions>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="StyleSelectorStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="Foreground" Value="{StaticResource GlyphFg}"/>
            <Setter Property="Template" Value="{StaticResource StyleSelectorTemplate}"/>
        </Style>
        <ControlTemplate x:Key="StyleSelectorItemTemplate" TargetType="{x:Type ComboBoxItem}">
            <Border x:Name="Bd" Height="{TemplateBinding MinHeight}">
                <Border.Background>
                    <SolidColorBrush Color="{StaticResource ItemNormalBg}"/>
                </Border.Background>
                <Viewbox Stretch="UniformToFill">
                    <Grid Width="2000">
                        <TextBlock x:Name="PART_Header" Text="{TemplateBinding Content}" Margin="24,7"/>
                    </Grid>
                </Viewbox>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="Bd">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource ItemOverBg}"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="StyleSelectorItemStyle" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Foreground" Value="{StaticResource GlyphFg}"/>
            <Setter Property="Template" Value="{StaticResource StyleSelectorItemTemplate}"/>
        </Style>
        <ControlTemplate x:Key="EnableControlTemplate" TargetType="{x:Type CheckBox}">
            <Grid x:Name="Bg" Height="{TemplateBinding MinHeight}">
                <Grid.Background>
                    <SolidColorBrush Color="{StaticResource ButtonNormalBg}"/>
                </Grid.Background>
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition From="Normal" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.2" To="Normal"/>
                            <VisualTransition From="MouseOver" GeneratedDuration="0:0:0.1" To="Pressed"/>
                            <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2" To="MouseOver"/>
                            <VisualTransition From="Pressed" GeneratedDuration="0:0:0.2" To="Normal"/>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Normal"/>
                        <VisualState x:Name="MouseOver">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bg">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonOverBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Pressed">
                            <Storyboard>
                                <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Bg">
                                    <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ButtonPressBg}"/>
                                </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Disabled"/>
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="CheckStates">
                        <VisualStateGroup.Transitions>
                            <VisualTransition From="Unchecked" GeneratedDuration="0:0:0.1" To="Checked"/>
                            <VisualTransition From="Checked" GeneratedDuration="0:0:0.2" To="Unchecked"/>
                        </VisualStateGroup.Transitions>
                        <VisualState x:Name="Checked"/>
                        <VisualState x:Name="Unchecked">
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Check">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Indeterminate"/>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Viewbox Stretch="UniformToFill">
                    <Grid Width="1000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <TextBlock x:Name="Text" Grid.Column="1" Text="{TemplateBinding Content}" Margin="4,5"/>
                        <Rectangle Fill="{StaticResource SelectorBg}" Width="{Binding ActualHeight, ElementName=Text}" Height="{Binding ActualHeight, ElementName=Text}" Margin="4"/>
                        <Path x:Name="Check" Data="M3,9L6,12 12,4" Stroke="White" StrokeThickness="2" Margin="4" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round"/>
                    </Grid>
                </Viewbox>
            </Grid>
        </ControlTemplate>
        <Style x:Key="EnableControlStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Foreground" Value="{StaticResource GlyphFg}"/>
            <Setter Property="Template" Value="{StaticResource EnableControlTemplate}"/>
        </Style>
        <Storyboard x:Key="ShowLeftSelector">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="SampleLeftBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="SelectorLeftBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <SineEase EasingMode="EaseInOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="SampleOverlay">
                <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
            </BooleanAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="HideLeftSelector">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="SampleLeftBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="SelectorLeftBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <SineEase EasingMode="EaseInOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="SampleOverlay">
                <DiscreteBooleanKeyFrame KeyTime="0" Value="False"/>
            </BooleanAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ShowTopSelector">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="SampleTopBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="SelectorTopBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <SineEase EasingMode="EaseInOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="SampleOverlay">
                <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
            </BooleanAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="HideTopSelector">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="SampleTopBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="SelectorTopBar">
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1">
                    <EasingDoubleKeyFrame.EasingFunction>
                        <SineEase EasingMode="EaseInOut"/>
                    </EasingDoubleKeyFrame.EasingFunction>
                </EasingDoubleKeyFrame>
            </DoubleAnimationUsingKeyFrames>
            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.IsHitTestVisible)" Storyboard.TargetName="SampleOverlay">
                <DiscreteBooleanKeyFrame KeyTime="0" Value="False"/>
            </BooleanAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ShowContainer1" BeginTime="0:0:0.2" SpeedRatio="1.4">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Fade">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.8" Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="Fade">
                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SampleContainer2">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.4" Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SampleContainer1">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.4" Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ShowContainer2" BeginTime="0:0:0.2" SpeedRatio="1.4">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Fade">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.8" Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="Fade">
                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SampleContainer1">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.4" Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SampleContainer2">
                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                <DiscreteObjectKeyFrame KeyTime="0:0:0.4" Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
        <Geometry x:Key="NoesisLogoGeometry">M64.552314,61.408115 L90.473059,64.639252 65.938536,97.224111 96.858771,170.22477 151.36087,176.44062 176.65871,144.70187 186.30899,167.69955 161.59547,200.607 80.812194,191.57223 39.827483,94.941438 z M48.254649,23.461594 L152.39867,36.273918 169.09616,74.476677 153.32091,95.305482 137.28592,57.748096 58.689337,48.038651 58.673125,48.036747 26.085236,92.157874 40.901858,129.9017 16.161385,126.74894 0.032970434,88.96424 z M136.8885,0 L177.71051,4.9764633 210.32399,79.460176 147.07187,163.27949 105.70369,158.62394 95.540381,134.55325 136.09376,139.68585 183.81151,76.187043 161.88087,25.886173 121.79224,19.86055 z</Geometry>
        <SolidColorBrush x:Key="NoesisLogoBlueBg" Color="#FF2AA6E2"/>
        <Geometry x:Key="NoesisTextGeometry">M92.8579999677658,70.3415300000004L91.6092999677657,70.3415300000004C89.1117999677657,70.3415300000004 86.3690999677657,69.0553500000004 84.6772999677657,67.5409700000003 83.3359999677656,66.3402600000004 81.3786999677656,63.7640900000003 79.5695999677656,61.6829800000004L48.2047999677656,14.2132800000004C44.6023999677656,9.61943000000042 40.5841999677656,5.85798000000045 37.5730999677657,3.3297700000004 32.8352999677656,1.39255000000037 29.1355999677657,0.416200000000344 22.8921999677656,0.416200000000344L-3.22343520764434E-08,0.416200000000344 -3.22343520764434E-08,91.5688500000003 21.6435999677657,91.5688500000003 21.6435999677657,21.6435500000003 22.8921999677656,21.6435500000003C25.3893999677656,21.6435500000003 27.0235999677656,22.4759800000004 29.1048999677656,23.7246500000003 31.1705999677658,25.5488600000003 33.1231999677656,27.6454000000003 34.6437999677657,30.1582000000003L66.0398999677656,78.0749800000003C69.6422999677656,82.7973200000003 72.2215999677657,85.6954300000003 75.5205999677657,88.6398700000003 80.0990999677657,90.7209900000004 84.9497999677657,91.9850800000002 91.6092999677657,91.9850800000002L114.501399967766,91.9850800000002 114.501399967766,2.27373673749166E-13 92.8579999677658,2.27373673749166E-13z M206.253499967766,3.41060514011881E-13L160.667099967766,3.41060514011881E-13C137.774799967766,3.41060514011881E-13,126.120799967766,9.57309000000032,126.120799967766,29.1355300000003L126.120799967766,62.4333200000003C126.120799967766,81.5795200000003,137.774799967766,91.5688500000003,160.667099967766,91.5688500000003L206.253499967766,91.5688500000003C229.145899967766,91.5688500000003,240.800099967766,81.9957600000003,240.800099967766,62.4333200000003L240.800099967766,29.1355300000003C240.800099967766,9.98931000000039,229.145899967766,3.41060514011881E-13,206.253499967766,3.41060514011881E-13z M218.323899967766,62.4333200000003C218.323899967766,67.4279700000003,214.161899967766,70.3415300000004,206.253499967766,70.3415300000004L160.667099967766,70.3415300000004C152.758899967766,70.3415300000004,148.596999967766,67.8441800000004,148.596999967766,62.4333200000003L148.596999967766,29.1355300000003C148.596999967766,23.7246500000003,152.758899967766,21.2273400000003,160.667099967766,21.2273400000003L206.253499967766,21.2273400000003C214.161899967766,21.2273400000003,218.323899967766,23.7246500000003,218.323899967766,29.1355300000003z M274.513899967766,65.7631100000002L274.513899967766,56.6062200000003 366.277899967766,56.6062200000003 366.277899967766,35.3788800000003 274.513899967766,35.3788800000003 274.513899967766,26.2219700000003C274.513899967766,23.3084200000003,276.178999967766,21.6435500000002,279.508699967766,21.6435500000002L366.694299967766,21.6435500000002 366.694299967766,2.27373673749166E-13 279.508699967766,2.27373673749166E-13C261.194999967766,2.27373673749166E-13,252.037899967766,7.49200000000019,252.037899967766,22.0597700000002L252.037899967766,68.6766500000002C252.037899967766,83.6606500000002,261.194999967766,91.1526500000002,279.508699967766,91.1526500000002L367.110299967766,91.1526500000002 367.110299967766,69.9253100000002 279.508699967766,69.9253100000002C276.178999967766,70.3415300000001,274.513899967766,68.6766500000002,274.513899967766,65.7631100000002z M464.725099967766,34.9626400000003L404.986699967766,34.9626400000003C401.656899967766,34.9626400000003,399.575899967766,33.7139800000003,399.575899967766,31.6328800000003L399.575899967766,24.5570900000003C399.575899967766,22.4759800000004,401.240899967766,21.2273400000003,404.986699967766,21.2273400000003L489.281899967766,21.2273400000003 489.281899967766,3.41060514011881E-13 404.986699967766,3.41060514011881E-13C386.672899967766,3.41060514011881E-13,377.516099967766,7.4920000000003,377.516099967766,22.0597700000003L377.516099967766,36.6275400000003C377.516099967766,49.5304200000003,386.672899967766,56.1899800000003,404.986699967766,56.1899800000003L464.725099967766,56.1899800000003C468.054699967766,56.1899800000003,469.719799967766,57.4386300000003,469.719799967766,59.5197500000004L469.719799967766,67.0117400000004C469.719799967766,69.0928600000004,468.054699967766,70.3415300000004,464.725099967766,70.3415300000004L380.429599967766,70.3415300000004 380.429599967766,91.5688500000003 464.725099967766,91.5688500000003C483.038799967766,91.5688500000003,492.195599967766,84.0768600000003,492.195599967766,69.5090700000003L492.195599967766,57.0224100000002C492.195599967766,42.4546400000002,483.038799967766,34.9626400000003,464.725099967766,34.9626400000003z M503.433699967766,3.41060514011881E-13L525.909499967766,3.41060514011881E-13 525.909499967766,91.1526500000003 503.433699967766,91.1526500000003z M625.010299967766,34.9626400000003L565.054499967766,34.9626400000003C561.724799967766,34.9626400000003,559.643599967766,33.7139800000003,559.643599967766,31.6328800000003L559.643599967766,24.5570900000003C559.643599967766,22.4759800000004,561.308399967766,21.2273400000003,565.054499967766,21.2273400000003L649.567499967766,21.2273400000003 649.567499967766,3.41060514011881E-13 565.054499967766,3.41060514011881E-13C546.740699967766,3.41060514011881E-13,537.583799967766,7.4920000000003,537.583799967766,22.0597700000003L537.583799967766,36.6275400000003C537.583799967766,49.5304200000003,546.740699967766,56.1899800000003,565.054499967766,56.1899800000003L625.010299967766,56.1899800000003C628.340199967766,56.1899800000003,630.005099967766,57.4386300000003,630.005099967766,59.5197500000004L630.005099967766,67.0117400000004C630.005099967766,69.0928600000004,628.340199967766,70.3415300000004,625.010299967766,70.3415300000004L540.497399967766,70.3415300000004 540.497399967766,91.5688500000003 625.010299967766,91.5688500000003C643.324099967766,91.5688500000003,652.481199967766,84.0768600000003,652.481199967766,69.5090700000003L652.481199967766,57.0224100000002C652.064899967766,42.4546400000002,642.907899967766,34.9626400000003,625.010299967766,34.9626400000003z</Geometry>
        <Geometry x:Key="NoesisGuiTextGeometry">M218.200700106049,67.01174C218.200700106049,69.09286,216.535800106049,70.34153,213.205900106049,70.34153L153.648800106049,70.34153C150.319100106049,70.34153,148.237800106049,69.09286,148.237800106049,67.01174L148.237800106049,0.416200000000003 125.762100106049,0.416200000000003 125.762100106049,69.50907C125.762100106049,84.49309,134.918800106049,91.98508,153.232600106049,91.98508L212.789900106049,91.98508C231.103500106049,91.98508,240.260500106049,84.49309,240.260500106049,69.92531L240.260500106049,2.5410988417629E-21 217.784500106049,2.5410988417629E-21 217.784500106049,67.01174z M251.914700106049,2.5410988417629E-21L274.390700106049,2.5410988417629E-21 274.390700106049,91.15265 251.914700106049,91.15265z M64.3942001060486,35.79507L64.3942001060486,58.27109 92.2812001060488,58.27109 92.2812001060488,70.34153 27.4707001060488,70.34153C24.1410001060485,70.34153,22.0598001060485,68.67665,22.0598001060485,65.76311L22.0598001060485,25.80576C22.0598001060485,22.89222,23.7246001060485,21.2273399999999,27.4707001060488,21.2273399999999L112.259700106049,21.2273399999999 112.259700106049,2.5410988417629E-21 27.4707001060488,2.5410988417629E-21C9.15670010604844,2.5410988417629E-21,1.06048446468776E-07,7.49199999999996,1.06048446468776E-07,22.05977L1.06048446468776E-07,68.67665C1.06048446468776E-07,83.66065,9.15670010604844,91.15265,27.4707001060488,91.15265L114.757000106049,91.15265 114.757000106049,35.37888 64.3942001060486,35.37888z</Geometry>
    </UserControl.Resources>
    <UserControl.Triggers>
        <EventTrigger RoutedEvent="ToggleButton.Checked" SourceName="SelectorLeftExpand">
            <BeginStoryboard Storyboard="{StaticResource ShowLeftSelector}"/>
        </EventTrigger>
        <EventTrigger RoutedEvent="ToggleButton.Unchecked" SourceName="SelectorLeftExpand">
            <BeginStoryboard Storyboard="{StaticResource HideLeftSelector}"/>
        </EventTrigger>
        <EventTrigger RoutedEvent="ToggleButton.Checked" SourceName="SelectorTopExpand">
            <BeginStoryboard Storyboard="{StaticResource ShowTopSelector}"/>
        </EventTrigger>
        <EventTrigger RoutedEvent="ToggleButton.Unchecked" SourceName="SelectorTopExpand">
            <BeginStoryboard Storyboard="{StaticResource HideTopSelector}"/>
        </EventTrigger>
    </UserControl.Triggers>
    <Grid>
        <Grid>
            <Grid.Resources>
                <ResourceDictionary Source="/SamplesWPF;component/Assets/NoesisGUI/Samples/Common/LogoResources.xaml"/>
            </Grid.Resources>
            <Border Background="{StaticResource NoesisLogoBg}"/>
            <Path Data="{StaticResource NoesisLogoGeometry}" Fill="{StaticResource NoesisLogoFg}" RenderTransform="{StaticResource NoesisLogoTransform}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" StrokeLineJoin="Round" UseLayoutRounding="False"/>
        </Grid>
        <Grid x:Name="Layout">
            <Grid.RowDefinitions>
                <RowDefinition Height="3.5*"/>
                <RowDefinition Height="0.5*"/>
                <RowDefinition Height="6*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2.5*"/>
                <ColumnDefinition Width="0.5*"/>
                <ColumnDefinition Width="7*"/>
            </Grid.ColumnDefinitions>
            <Decorator x:Name="LeftBarWidth" Grid.RowSpan="3"/>
            <Decorator x:Name="TopBarHeight" Grid.ColumnSpan="3"/>
            <Decorator x:Name="ExpandWidth" Grid.RowSpan="3" Grid.Column="1"/>
            <Decorator x:Name="ExpandHeight" Grid.ColumnSpan="3" Grid.Row="1"/>
            <Decorator x:Name="ItemHeight" Grid.Row="2" Grid.Column="2" Height="64"/>
        </Grid>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Decorator x:Name="SampleLeftBar" Width="{Binding ActualWidth, ElementName=LeftBarWidth}" Grid.RowSpan="2">
                <Decorator.LayoutTransform>
                    <ScaleTransform ScaleX="0"/>
                </Decorator.LayoutTransform>
            </Decorator>
            <Decorator x:Name="SampleTopBar" Height="{Binding ActualHeight, ElementName=TopBarHeight}" Grid.ColumnSpan="2">
                <Decorator.LayoutTransform>
                    <ScaleTransform ScaleY="0"/>
                </Decorator.LayoutTransform>
            </Decorator>
            <Viewbox x:Name="SampleContainer" Grid.Row="1" Grid.Column="1">
                <Grid>
                    <Border x:Name="SampleContainer1">
                        <StackPanel Margin="250,200" Width="1280" VerticalAlignment="Center" >
                            <StackPanel Orientation="Horizontal" Margin="0,0,62.837,0" d:LayoutOverrides="Width">
                                <Path Data="{StaticResource NoesisLogoGeometry}" Fill="{StaticResource NoesisLogoBlueBg}" Stretch="Uniform"/>
                                <Path Data="{StaticResource NoesisTextGeometry}" Fill="White" Stretch="Uniform" Margin="40,0,0,0" VerticalAlignment="Center"/>
                                <Path Data="{StaticResource NoesisGuiTextGeometry}" Fill="{StaticResource NoesisLogoBlueBg}" Stretch="Uniform" Margin="40,0,0,0" VerticalAlignment="Center"/>
                            </StackPanel>
                            <Grid d:LayoutOverrides="LeftPosition, RightPosition" Margin="0,100,0,0">
                                <TextBlock Text="Control &amp; Style Gallery" TextAlignment="Center" Foreground="#40000000" FontSize="100" Margin="0,6,-4,0"/>
                                <TextBlock Text="Control &amp; Style Gallery" TextAlignment="Center" Foreground="White" FontSize="100"/>
                            </Grid>
                        </StackPanel>
                    </Border>
                    <Border x:Name="SampleContainer2" Visibility="Collapsed"/>
                </Grid>
            </Viewbox>
            <Border x:Name="Fade" Grid.Row="1" Grid.Column="1" Visibility="Collapsed">
                <Border.Background>
                    <SolidColorBrush Color="#FF0A3459" Opacity="0"/>
                </Border.Background>
            </Border>
            <Grid x:Name="SampleOverlay" Grid.Row="1" Grid.Column="1" Background="Transparent" IsHitTestVisible="false"/>
        </Grid>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="4*"/>
                <RowDefinition Height="6*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="7*"/>
            </Grid.ColumnDefinitions>
            <StackPanel x:Name="SelectorLeft" Grid.RowSpan="2" Orientation="Horizontal" HorizontalAlignment="Right">
                <Border x:Name="SelectorLeftContainer" Width="{Binding ActualWidth, ElementName=LeftBarWidth}" Background="{StaticResource SelectorBg}">
                    <Grid x:Name="Selector">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle Grid.RowSpan="3" Height="12" VerticalAlignment="Bottom" Margin="0,0,0,-12" Fill="{StaticResource TD_Shadow}" IsHitTestVisible="False"/>
                        <Rectangle Grid.RowSpan="3" Width="12" HorizontalAlignment="Right" Margin="0,0,-12,0" Fill="{StaticResource LR_Shadow}" IsHitTestVisible="False"/>
                        <ComboBox x:Name="StyleSelector" MinHeight="{Binding Height, ElementName=ItemHeight}" Style="{StaticResource StyleSelectorStyle}">
                            <ComboBoxItem Style="{StaticResource StyleSelectorItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Content="Noesis Style" IsSelected="True"/>
                            <ComboBoxItem Style="{StaticResource StyleSelectorItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Content="Simple Style"/>
                            <ComboBoxItem Style="{StaticResource StyleSelectorItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Content="Windows Style"/>
                        </ComboBox>
                        <TreeView x:Name="SampleSelector" Grid.Row="1" Background="{x:Null}" BorderBrush="{x:Null}" BorderThickness="0"
                                  Style="{StaticResource SelectorStyle}" MinWidth="{Binding Height, ElementName=ItemHeight}">
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Brushes">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="All brushes" Tag="Brushes"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ImageBrush Stretch" Tag="ImageBrushStretch"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ImageBrush Tile" Tag="ImageBrushTile"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ImageBrush Viewbox" Tag="ImageBrushViewbox"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Image Atlas" Tag="ImageAtlas"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Reflections" Tag="Reflections"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Shapes">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Butterfly" Tag="Butterfly"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Lion" Tag="Lion"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Tiger" Tag="Tiger"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Time" Tag="Time"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Tux" Tag="Tux"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Car HUD" Tag="CarHud"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Panels">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Canvas" Tag="Canvas"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="DockPanel" Tag="DockPanel"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Grid" Tag="Grid"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="UniformGrid" Tag="UniformGrid"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="StackPanel" Tag="StackPanel"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="WraPanel" Tag="WrapPanel"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Expander" Tag="Expander"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Button controls">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Button" Tag="Button"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="CheckBox" Tag="CheckBox"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="RadioButton" Tag="RadioButton"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Selector controls">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ComboBox" Tag="ComboBox"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ListBox" Tag="ListBox"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="TreeView" Tag="TreeView"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Menu controls">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Menu" Tag="Menu"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ContextMenu" Tag="ContextMenu"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Range controls">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Slider" Tag="Slider"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ProgressBar" Tag="ProgressBar"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Bars">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="ToolBar" Tag="ToolBar"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="StatusBar" Tag="StatusBar"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Text controls">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="TextBlock" Tag="Text"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="TextBox" Tag="TextBox"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="PasswordBox" Tag="PasswordBox"/>
                            </TreeViewItem>
                            <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="General">
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Projection" Tag="Projection"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Styles" Tag="Styles"/>
                                <TreeViewItem Style="{StaticResource SampleItemStyle}" MinHeight="{Binding Height, ElementName=ItemHeight}" Header="Control palette" Tag="Palette"/>
                            </TreeViewItem>
                        </TreeView>
                        <Rectangle Grid.Row="1" Height="8" VerticalAlignment="Top" Fill="{StaticResource TD_Shadow}"/>
                        <Rectangle Grid.Row="1" Height="8" VerticalAlignment="Bottom" Fill="{StaticResource DT_Shadow}"/>
                        <Rectangle Grid.Row="2" MinHeight="{Binding Height, ElementName=ItemHeight}">
                            <Rectangle.LayoutTransform>
                                <ScaleTransform ScaleY="0.25"/>
                            </Rectangle.LayoutTransform>
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{StaticResource ButtonDarkNormalBg}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Grid>
                </Border>
                <ToggleButton x:Name="SelectorLeftExpand" Template="{StaticResource SelectorExpandTemplate}"
					Width="{Binding ActualWidth, ElementName=ExpandWidth}" Height="{Binding Width, RelativeSource={RelativeSource Self}}" VerticalAlignment="Top">
                    <Viewbox>
                        <Path Data="{StaticResource SelectorExpandGeometry}" Stretch="None" Width="10" Height="10" Stroke="{StaticResource GlyphFg}" StrokeThickness="1" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Margin="1"/>
                    </Viewbox>
                </ToggleButton>
                <Decorator x:Name="SelectorLeftBar" Width="{Binding ActualWidth, ElementName=LeftBarWidth}">
                    <Decorator.LayoutTransform>
                        <ScaleTransform ScaleX="1"/>
                    </Decorator.LayoutTransform>
                </Decorator>
            </StackPanel>
            <StackPanel x:Name="SelectorTop" Grid.ColumnSpan="2" VerticalAlignment="Bottom" d:IsHidden="True">
                <Border x:Name="SelectorTopContainer" Height="{Binding ActualHeight, ElementName=TopBarHeight}" Background="{StaticResource SelectorBg}"/>
                <ToggleButton x:Name="SelectorTopExpand" Template="{StaticResource SelectorExpandTemplate}"
					Width="{Binding Height, RelativeSource={RelativeSource Self}}" Height="{Binding ActualHeight, ElementName=ExpandHeight}" HorizontalAlignment="Left">
                    <Viewbox>
                        <Path Data="{StaticResource SelectorExpandGeometry}" Stretch="None" Width="10" Height="10" Stroke="{StaticResource GlyphFg}" StrokeThickness="1" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Margin="1"/>
                    </Viewbox>
                </ToggleButton>
                <Decorator x:Name="SelectorTopBar" Height="{Binding ActualHeight, ElementName=TopBarHeight}">
                    <Decorator.LayoutTransform>
                        <ScaleTransform ScaleX="1"/>
                    </Decorator.LayoutTransform>
                </Decorator>
            </StackPanel>
        </Grid>
    </Grid>
</UserControl>