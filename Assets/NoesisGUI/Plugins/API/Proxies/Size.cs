//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[StructLayoutAttribute(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct Size {

  [MarshalAs(UnmanagedType.R4)]
  private float _width;

  [MarshalAs(UnmanagedType.R4)]
  private float _height;

  public Size(float width, float height) {
    if (width < 0 || height < 0) {
      throw new ArgumentException("Width and Height cannot be negative");
    }
    _width = width;
    _height = height;
  }

  public float Width {
    get { return this._width; }
    set {
      if (IsEmpty) {
        throw new InvalidOperationException("Empty Size cannot be modified");
      }
      if (value < 0.0f) {
        throw new ArgumentException("Width cannot be negative");
      }
      this._width = value;
    }
  }

  public float Height {
    get { return this._height; }
    set {
      if (IsEmpty) {
        throw new InvalidOperationException("Empty Size cannot be modified");
      }
      if (value < 0.0f) {
        throw new ArgumentException("Height cannot be negative");
      }
      this._height = value;
    }
  }

  public static Size Empty {
    get { return _empty; }
  }

  public bool IsEmpty {
    get { return _width < 0; }
  }

  public static explicit operator Vector(Size size) {
    return new Vector(size._width, size._height);
  }

  public static explicit operator Point(Size size) {
    return new Point(size._width, size._height);
  }

  public static bool operator==(Size s0, Size s1) {
    return s0._width == s1._width && s0._height == s1._height;
  }

  public static bool operator!=(Size s0, Size s1) {
    return !(s0 == s1);
  }

  public static bool Equals(Size s0, Size s1) {
    return s0 == s1;
  }

  public override bool Equals(Object o) {
    return o is Size && this == (Size)o;
  }

  public bool Equals(Size value) {
    return this == value;
  }

  public override int GetHashCode() {
    if (IsEmpty) {
      return 0;
    }
    else {
      return Width.GetHashCode() ^ Height.GetHashCode();
    }
  }

  public override string ToString() {
    return String.Format("{0},{1}", Width, Height);
  }

  public static Size Parse(string str) {
    Size size;
    if (Size.TryParse(str, out size)) {
      return size;
    }
    throw new ArgumentException("Cannot create Size from '" + str + "'");
  }

  #region Empty Size
  private static Size CreateEmptySize() {
    Size size = new Size();
    size._width = Single.NegativeInfinity;
    size._height = Single.NegativeInfinity;
    return size;
  }

  private static readonly Size _empty = CreateEmptySize();
  #endregion

  public static bool TryParse(string str, out Size result) {
    bool ret = NoesisGUI_PINVOKE.Size_TryParse(str != null ? str : string.Empty, out result);
    return ret;
  }

}

}

