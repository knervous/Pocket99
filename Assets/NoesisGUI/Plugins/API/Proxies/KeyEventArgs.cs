//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class KeyEventArgs : KeyboardEventArgs {
  private HandleRef swigCPtr;

  internal KeyEventArgs(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(KeyEventArgs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~KeyEventArgs() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_KeyEventArgs(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal static new void InvokeHandler(Delegate handler, IntPtr sender, IntPtr args) {
    KeyEventHandler handler_ = (KeyEventHandler)handler;
    if (handler_ != null) {
      handler_(Extend.GetProxy(sender, false), new KeyEventArgs(args, false));
    }
  }

  public Key Key {
    get {
      Key ret = (Key)NoesisGUI_PINVOKE.KeyEventArgs_Key_get(swigCPtr);
      return ret;
    } 
  }

  public Key OriginalKey {
    get {
      Key ret = (Key)NoesisGUI_PINVOKE.KeyEventArgs_OriginalKey_get(swigCPtr);
      return ret;
    } 
  }

  public KeyStates KeyStates {
    get {
      KeyStates ret = (KeyStates)NoesisGUI_PINVOKE.KeyEventArgs_KeyStates_get(swigCPtr);
      return ret;
    } 
  }

  public KeyEventArgs(object s, RoutedEvent e, Key key, KeyStates keyStates) : this(NoesisGUI_PINVOKE.new_KeyEventArgs(Noesis.Extend.GetInstanceHandle(s), RoutedEvent.getCPtr(e), (int)key, (int)keyStates), true) {
  }

  public bool IsDown {
    get {
      bool ret = NoesisGUI_PINVOKE.KeyEventArgs_IsDown_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsUp {
    get {
      bool ret = NoesisGUI_PINVOKE.KeyEventArgs_IsUp_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsRepeat {
    get {
      bool ret = NoesisGUI_PINVOKE.KeyEventArgs_IsRepeat_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsToggled {
    get {
      bool ret = NoesisGUI_PINVOKE.KeyEventArgs_IsToggled_get(swigCPtr);
      return ret;
    } 
  }

}

}

