//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class TextBoxBase : Control {
  internal new static TextBoxBase CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new TextBoxBase(cPtr, cMemoryOwn);
  }

  internal TextBoxBase(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(TextBoxBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected TextBoxBase() {
  }

  #region Events
  public event RoutedEventHandler SelectionChanged {
    add {
      AddHandler(SelectionChangedEvent, value);
    }
    remove {
      RemoveHandler(SelectionChangedEvent, value);
    }
  }

  public event RoutedEventHandler TextChanged {
    add {
      AddHandler(TextChangedEvent, value);
    }
    remove {
      RemoveHandler(TextChangedEvent, value);
    }
  }

  #endregion

  public void LineLeft() {
    NoesisGUI_PINVOKE.TextBoxBase_LineLeft(swigCPtr);
  }

  public void LineRight() {
    NoesisGUI_PINVOKE.TextBoxBase_LineRight(swigCPtr);
  }

  public void PageLeft() {
    NoesisGUI_PINVOKE.TextBoxBase_PageLeft(swigCPtr);
  }

  public void PageRight() {
    NoesisGUI_PINVOKE.TextBoxBase_PageRight(swigCPtr);
  }

  public void LineUp() {
    NoesisGUI_PINVOKE.TextBoxBase_LineUp(swigCPtr);
  }

  public void LineDown() {
    NoesisGUI_PINVOKE.TextBoxBase_LineDown(swigCPtr);
  }

  public void PageUp() {
    NoesisGUI_PINVOKE.TextBoxBase_PageUp(swigCPtr);
  }

  public void PageDown() {
    NoesisGUI_PINVOKE.TextBoxBase_PageDown(swigCPtr);
  }

  public void ScrollToHome() {
    NoesisGUI_PINVOKE.TextBoxBase_ScrollToHome(swigCPtr);
  }

  public void ScrollToEnd() {
    NoesisGUI_PINVOKE.TextBoxBase_ScrollToEnd(swigCPtr);
  }

  public void ScrollToHorizontalOffset(float offset) {
    NoesisGUI_PINVOKE.TextBoxBase_ScrollToHorizontalOffset(swigCPtr, offset);
  }

  public void ScrollToVerticalOffset(float offset) {
    NoesisGUI_PINVOKE.TextBoxBase_ScrollToVerticalOffset(swigCPtr, offset);
  }

  public static DependencyProperty AcceptsReturnProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_AcceptsReturnProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty AcceptsTabProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_AcceptsTabProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty CaretBrushProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_CaretBrushProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HorizontalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_HorizontalScrollBarVisibilityProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsReadOnlyProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_IsReadOnlyProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsSelectionActiveProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_IsSelectionActiveProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectionBrushProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_SelectionBrushProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectionOpacityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_SelectionOpacityProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty VerticalScrollBarVisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_VerticalScrollBarVisibilityProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent SelectionChangedEvent {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_SelectionChangedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_SelectionChangedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TextChangedEvent {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_TextChangedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_TextChangedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public bool AcceptsReturn {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_AcceptsReturn_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_AcceptsReturn_get(swigCPtr);
      return ret;
    } 
  }

  public bool AcceptsTab {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_AcceptsTab_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_AcceptsTab_get(swigCPtr);
      return ret;
    } 
  }

  public Brush CaretBrush {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_CaretBrush_set(swigCPtr, Brush.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_CaretBrush_get(swigCPtr);
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public ScrollBarVisibility HorizontalScrollBarVisibility {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_HorizontalScrollBarVisibility_set(swigCPtr, (int)value);
    } 
    get {
      ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.TextBoxBase_HorizontalScrollBarVisibility_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsReadOnly {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_IsReadOnly_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_IsReadOnly_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsSelectionActive {
    get {
      bool ret = NoesisGUI_PINVOKE.TextBoxBase_IsSelectionActive_get(swigCPtr);
      return ret;
    } 
  }

  public Brush SelectionBrush {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_SelectionBrush_set(swigCPtr, Brush.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TextBoxBase_SelectionBrush_get(swigCPtr);
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float SelectionOpacity {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_SelectionOpacity_set(swigCPtr, value);
    } 
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_SelectionOpacity_get(swigCPtr);
      return ret;
    } 
  }

  public ScrollBarVisibility VerticalScrollBarVisibility {
    set {
      NoesisGUI_PINVOKE.TextBoxBase_VerticalScrollBarVisibility_set(swigCPtr, (int)value);
    } 
    get {
      ScrollBarVisibility ret = (ScrollBarVisibility)NoesisGUI_PINVOKE.TextBoxBase_VerticalScrollBarVisibility_get(swigCPtr);
      return ret;
    } 
  }

  public float ExtentWidth {
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_ExtentWidth_get(swigCPtr);
      return ret;
    } 
  }

  public float ExtentHeight {
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_ExtentHeight_get(swigCPtr);
      return ret;
    } 
  }

  public float ViewportWidth {
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_ViewportWidth_get(swigCPtr);
      return ret;
    } 
  }

  public float ViewportHeight {
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_ViewportHeight_get(swigCPtr);
      return ret;
    } 
  }

  public float HorizontalOffset {
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_HorizontalOffset_get(swigCPtr);
      return ret;
    } 
  }

  public float VerticalOffset {
    get {
      float ret = NoesisGUI_PINVOKE.TextBoxBase_VerticalOffset_get(swigCPtr);
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.TextBoxBase_GetStaticType();
    return ret;
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_TextBoxBase(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

