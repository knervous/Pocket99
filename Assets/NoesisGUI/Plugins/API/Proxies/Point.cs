//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[StructLayoutAttribute(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct Point {

  [MarshalAs(UnmanagedType.R4)]
  private float _x;
  [MarshalAs(UnmanagedType.R4)]
  private float _y;

  public float this[uint i] {
    get {
      switch (i) {
        case 0: return X;
        case 1: return Y;
        default: throw new IndexOutOfRangeException();
      }
    }
    set {
      switch (i) {
        case 0: X = value; break;
        case 1: Y = value; break;
        default: throw new IndexOutOfRangeException();
      }
    }
  }

  public Point(float x, float y) {
    _x = x;
    _y = y;
  }

  public float X {
    get { return this._x; }
    set { this._x = value; }
  }

  public float Y {
    get { return this._y; }
    set { this._y = value; }
  }

  public void Offset(float offsetX, float offsetY) {
    _x += offsetX;
    _y += offsetY;
  }

  public static Point operator+(Point point, Vector vector) {
    return new Point(point._x + vector.X, point._y + vector.Y);
  }

  public static Point Add(Point point, Vector vector) {
    return new Point(point._x + vector.X, point._y + vector.Y);
  }

  public static Point operator-(Point point, Vector vector) {
    return new Point(point._x - vector.X, point._y - vector.Y);
  }

  public static Point Subtract(Point point, Vector vector) {
    return new Point(point._x - vector.X, point._y - vector.Y);
  }

  public static Vector operator-(Point point1, Point point2) {
    return new Vector(point1._x - point2._x, point1._y - point2._y);
  }

  public static Vector Subtract(Point point1, Point point2) {
    return new Vector(point1._x - point2._x, point1._y - point2._y);
  }

  public static Point operator*(Point point, Matrix matrix) {
    return matrix.Transform(point);
  }

  public static Point Multiply(Point point, Matrix matrix) {
    return matrix.Transform(point);
  }

  public static explicit operator Size(Point point) {
    return new Size(Math.Abs(point._x), Math.Abs(point._y));
  }

  public static explicit operator Vector(Point point) {
    return new Vector(point._x, point._y);
  }

  public static bool operator==(Point p0, Point p1) {
    return p0._x == p1._x && p0._y == p1._y;
  }

  public static bool operator != (Point p0, Point p1) {
    return !(p0 == p1);
  }

  public static bool Equals (Point p0, Point p1) {
    return p0 == p1;
  }

  public override bool Equals(Object o) {
    return o is Point && this == (Point)o;
  }

  public bool Equals(Point value) {
    return this == value;
  }

  public override int GetHashCode() {
    return X.GetHashCode() ^ Y.GetHashCode();
  }

  public override string ToString() {
    return String.Format("{0},{1}", X, Y);
  }

  public static Point Parse(string str) {
    Point p;
    if (Point.TryParse(str, out p)) {
      return p;
    }
    throw new ArgumentException("Cannot create Point from '" + str + "'");
  }

  public static bool TryParse(string str, out Point result) {
    bool ret = NoesisGUI_PINVOKE.Point_TryParse(str != null ? str : string.Empty, out result);
    return ret;
  }

}

}

