//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Windows.Input;

namespace Noesis
{

public class MenuItem : HeaderedItemsControl {
  internal new static MenuItem CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new MenuItem(cPtr, cMemoryOwn);
  }

  internal MenuItem(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(MenuItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Routed Events
  public event RoutedEventHandler Click {
    add {
      AddHandler(ClickEvent, value);
    }
    remove {
      RemoveHandler(ClickEvent, value);
    }
  }

  public event RoutedEventHandler Checked {
    add {
      AddHandler(CheckedEvent, value);
    }
    remove {
      RemoveHandler(CheckedEvent, value);
    }
  }

  public event RoutedEventHandler Unchecked {
    add {
      AddHandler(UncheckedEvent, value);
    }
    remove {
      RemoveHandler(UncheckedEvent, value);
    }
  }

  public event RoutedEventHandler SubmenuClosed {
    add {
      AddHandler(SubmenuClosedEvent, value);
    }
    remove {
      RemoveHandler(SubmenuClosedEvent, value);
    }
  }

  public event RoutedEventHandler SubmenuOpened {
    add {
      AddHandler(SubmenuOpenedEvent, value);
    }
    remove {
      RemoveHandler(SubmenuOpenedEvent, value);
    }
  }
  #endregion

  public ICommand Command {
    get {
      return (ICommand)GetCommandHelper();
    }
    set {
      SetCommandHelper(value);
    }
  }

  public MenuItem() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(MenuItem).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_MenuItem();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public UIElement GetCommandTarget() {
    IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_GetCommandTarget(swigCPtr);
    return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
  }

  public void SetCommandTarget(UIElement target) {
    NoesisGUI_PINVOKE.MenuItem_SetCommandTarget(swigCPtr, UIElement.getCPtr(target));
  }

  public static DependencyProperty CommandParameterProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CommandParameterProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty CommandProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CommandProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty CommandTargetProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CommandTargetProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IconProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IconProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty InputGestureTextProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_InputGestureTextProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsCheckableProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsCheckableProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsCheckedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsCheckedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsHighlightedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsHighlightedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsPressedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsPressedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsSubmenuOpenProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_IsSubmenuOpenProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty RoleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_RoleProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty StaysOpenOnClickProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_StaysOpenOnClickProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SeparatorStyleKey {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_SeparatorStyleKey_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent CheckedEvent {
    set {
      NoesisGUI_PINVOKE.MenuItem_CheckedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CheckedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent ClickEvent {
    set {
      NoesisGUI_PINVOKE.MenuItem_ClickEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_ClickEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent SubmenuClosedEvent {
    set {
      NoesisGUI_PINVOKE.MenuItem_SubmenuClosedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_SubmenuClosedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent SubmenuOpenedEvent {
    set {
      NoesisGUI_PINVOKE.MenuItem_SubmenuOpenedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_SubmenuOpenedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent UncheckedEvent {
    set {
      NoesisGUI_PINVOKE.MenuItem_UncheckedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_UncheckedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object CommandParameter {
    set {
      NoesisGUI_PINVOKE.MenuItem_CommandParameter_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_CommandParameter_get(swigCPtr);
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object Icon {
    set {
      NoesisGUI_PINVOKE.MenuItem_Icon_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_Icon_get(swigCPtr);
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public string InputGestureText {
    set {
      NoesisGUI_PINVOKE.MenuItem_InputGestureText_set(swigCPtr, value != null ? value : string.Empty);
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.MenuItem_InputGestureText_get(swigCPtr);
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public bool IsCheckable {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsCheckable_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.MenuItem_IsCheckable_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsChecked {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsChecked_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.MenuItem_IsChecked_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsHighlighted {
    get {
      bool ret = NoesisGUI_PINVOKE.MenuItem_IsHighlighted_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsPressed {
    get {
      bool ret = NoesisGUI_PINVOKE.MenuItem_IsPressed_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsSubmenuOpen {
    set {
      NoesisGUI_PINVOKE.MenuItem_IsSubmenuOpen_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.MenuItem_IsSubmenuOpen_get(swigCPtr);
      return ret;
    } 
  }

  public MenuItemRole Role {
    get {
      MenuItemRole ret = (MenuItemRole)NoesisGUI_PINVOKE.MenuItem_Role_get(swigCPtr);
      return ret;
    } 
  }

  public bool StaysOpenOnClick {
    set {
      NoesisGUI_PINVOKE.MenuItem_StaysOpenOnClick_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.MenuItem_StaysOpenOnClick_get(swigCPtr);
      return ret;
    } 
  }

  private object GetCommandHelper() {
    IntPtr cPtr = NoesisGUI_PINVOKE.MenuItem_GetCommandHelper(swigCPtr);
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  private void SetCommandHelper(object command) {
    NoesisGUI_PINVOKE.MenuItem_SetCommandHelper(swigCPtr, Noesis.Extend.GetInstanceHandle(command));
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.MenuItem_GetStaticType();
    return ret;
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_MenuItem(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

