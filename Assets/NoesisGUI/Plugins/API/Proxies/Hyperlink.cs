//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Windows.Input;

namespace Noesis
{

public class Hyperlink : Span {
  internal new static Hyperlink CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Hyperlink(cPtr, cMemoryOwn);
  }

  internal Hyperlink(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Hyperlink obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events
  public event RoutedEventHandler Click {
    add {
      AddHandler(ClickEvent, value);
    }
    remove {
      RemoveHandler(ClickEvent, value);
    }
  }

  public event RequestNavigateEventHandler RequestNavigate {
    add {
      AddHandler(RequestNavigateEvent, value);
    }
    remove {
      RemoveHandler(RequestNavigateEvent, value);
    }
  }
  #endregion

  public ICommand Command {
    get {
      return (ICommand)GetCommandHelper();
    }
    set {
      SetCommandHelper(value);
    }
  }

  public Hyperlink() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    registerExtend = false;
    return NoesisGUI_PINVOKE.new_Hyperlink__SWIG_0();
  }

  public Hyperlink(Inline childInline) : this(NoesisGUI_PINVOKE.new_Hyperlink__SWIG_1(Inline.getCPtr(childInline)), true) {
  }

  public static DependencyProperty CommandProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_CommandProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty CommandParameterProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_CommandParameterProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty CommandTargetProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_CommandTargetProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty NavigateUriProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_NavigateUriProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty TargetNameProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_TargetNameProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent ClickEvent {
    set {
      NoesisGUI_PINVOKE.Hyperlink_ClickEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_ClickEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent RequestNavigateEvent {
    set {
      NoesisGUI_PINVOKE.Hyperlink_RequestNavigateEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_RequestNavigateEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object CommandParameter {
    set {
      NoesisGUI_PINVOKE.Hyperlink_CommandParameter_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_CommandParameter_get(swigCPtr);
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public UIElement CommandTarget {
    set {
      NoesisGUI_PINVOKE.Hyperlink_CommandTarget_set(swigCPtr, UIElement.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_CommandTarget_get(swigCPtr);
      return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public string NavigateUri {
    set {
      NoesisGUI_PINVOKE.Hyperlink_NavigateUri_set(swigCPtr, value != null ? value : string.Empty);
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.Hyperlink_NavigateUri_get(swigCPtr);
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public string TargetName {
    set {
      NoesisGUI_PINVOKE.Hyperlink_TargetName_set(swigCPtr, value != null ? value : string.Empty);
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.Hyperlink_TargetName_get(swigCPtr);
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  private object GetCommandHelper() {
    IntPtr cPtr = NoesisGUI_PINVOKE.Hyperlink_GetCommandHelper(swigCPtr);
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  private void SetCommandHelper(object command) {
    NoesisGUI_PINVOKE.Hyperlink_SetCommandHelper(swigCPtr, Noesis.Extend.GetInstanceHandle(command));
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Hyperlink_GetStaticType();
    return ret;
  }

}

}

