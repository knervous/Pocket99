//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class TileBrush : Brush {
  internal new static TileBrush CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new TileBrush(cPtr, cMemoryOwn);
  }

  internal TileBrush(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(TileBrush obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected TileBrush() {
  }

  public static DependencyProperty AlignmentXProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_AlignmentXProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty AlignmentYProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_AlignmentYProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty StretchProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_StretchProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty TileModeProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_TileModeProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ViewboxProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_ViewboxProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ViewboxUnitsProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_ViewboxUnitsProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ViewportProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_ViewportProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ViewportUnitsProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TileBrush_ViewportUnitsProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public AlignmentX AlignmentX {
    set {
      NoesisGUI_PINVOKE.TileBrush_AlignmentX_set(swigCPtr, (int)value);
    } 
    get {
      AlignmentX ret = (AlignmentX)NoesisGUI_PINVOKE.TileBrush_AlignmentX_get(swigCPtr);
      return ret;
    } 
  }

  public AlignmentY AlignmentY {
    set {
      NoesisGUI_PINVOKE.TileBrush_AlignmentY_set(swigCPtr, (int)value);
    } 
    get {
      AlignmentY ret = (AlignmentY)NoesisGUI_PINVOKE.TileBrush_AlignmentY_get(swigCPtr);
      return ret;
    } 
  }

  public Stretch Stretch {
    set {
      NoesisGUI_PINVOKE.TileBrush_Stretch_set(swigCPtr, (int)value);
    } 
    get {
      Stretch ret = (Stretch)NoesisGUI_PINVOKE.TileBrush_Stretch_get(swigCPtr);
      return ret;
    } 
  }

  public TileMode TileMode {
    set {
      NoesisGUI_PINVOKE.TileBrush_TileMode_set(swigCPtr, (int)value);
    } 
    get {
      TileMode ret = (TileMode)NoesisGUI_PINVOKE.TileBrush_TileMode_get(swigCPtr);
      return ret;
    } 
  }

  public Rect Viewbox {
    set {
      NoesisGUI_PINVOKE.TileBrush_Viewbox_set(swigCPtr, ref value);
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.TileBrush_Viewbox_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Rect>(ret);
      }
      else {
        return new Rect();
      }
    }

  }

  public BrushMappingMode ViewboxUnits {
    set {
      NoesisGUI_PINVOKE.TileBrush_ViewboxUnits_set(swigCPtr, (int)value);
    } 
    get {
      BrushMappingMode ret = (BrushMappingMode)NoesisGUI_PINVOKE.TileBrush_ViewboxUnits_get(swigCPtr);
      return ret;
    } 
  }

  public Rect Viewport {
    set {
      NoesisGUI_PINVOKE.TileBrush_Viewport_set(swigCPtr, ref value);
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.TileBrush_Viewport_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Rect>(ret);
      }
      else {
        return new Rect();
      }
    }

  }

  public BrushMappingMode ViewportUnits {
    set {
      NoesisGUI_PINVOKE.TileBrush_ViewportUnits_set(swigCPtr, (int)value);
    } 
    get {
      BrushMappingMode ret = (BrushMappingMode)NoesisGUI_PINVOKE.TileBrush_ViewportUnits_get(swigCPtr);
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.TileBrush_GetStaticType();
    return ret;
  }

}

}

