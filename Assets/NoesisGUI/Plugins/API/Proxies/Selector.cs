//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Selector : ItemsControl {
  internal new static Selector CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Selector(cPtr, cMemoryOwn);
  }

  internal Selector(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Selector obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Selector() {
  }

  #region Events
  public event SelectionChangedEventHandler SelectionChanged {
    add {
      AddHandler(SelectionChangedEvent, value);
    }
    remove {
      RemoveHandler(SelectionChangedEvent, value);
    }
  }

  #endregion

  public static bool GetIsSelected(DependencyObject element) {
    bool ret = NoesisGUI_PINVOKE.Selector_GetIsSelected(DependencyObject.getCPtr(element));
    return ret;
  }

  public static void SetIsSelected(DependencyObject element, bool value) {
    NoesisGUI_PINVOKE.Selector_SetIsSelected(DependencyObject.getCPtr(element), value);
  }

  public static bool GetIsSelectionActive(UIElement element) {
    bool ret = NoesisGUI_PINVOKE.Selector_GetIsSelectionActive(UIElement.getCPtr(element));
    return ret;
  }

  public static DependencyProperty IsSelectedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSelectedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsSelectionActiveProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSelectionActiveProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsSynchronizedWithCurrentItemProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItemProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectedIndexProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedIndexProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectedItemProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedItemProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectedValueProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedValueProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SelectedValuePathProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedValuePathProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent SelectedEvent {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent SelectionChangedEvent {
    set {
      NoesisGUI_PINVOKE.Selector_SelectionChangedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectionChangedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent UnselectedEvent {
    set {
      NoesisGUI_PINVOKE.Selector_UnselectedEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_UnselectedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Nullable<bool> IsSynchronizedWithCurrentItem {
    set {
      NullableBool tempvalue = value;
      NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItem_set(swigCPtr, ref tempvalue);
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItem_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<NullableBool>(ret);
      }
      else {
        return new Nullable<bool>();
      }
    }

  }

  public int SelectedIndex {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedIndex_set(swigCPtr, value);
    } 
    get {
      int ret = NoesisGUI_PINVOKE.Selector_SelectedIndex_get(swigCPtr);
      return ret;
    } 
  }

  public object SelectedItem {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedItem_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedItem_get(swigCPtr);
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public object SelectedValue {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedValue_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
    }
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedValue_get(swigCPtr);
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public string SelectedValuePath {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedValuePath_set(swigCPtr, value != null ? value : string.Empty);
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.Selector_SelectedValuePath_get(swigCPtr);
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Selector_GetStaticType();
    return ret;
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_Selector(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

