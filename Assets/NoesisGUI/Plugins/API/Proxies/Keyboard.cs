//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Keyboard : BaseComponent {
  internal new static Keyboard CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Keyboard(cPtr, cMemoryOwn);
  }

  internal Keyboard(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Keyboard obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Keyboard() {
  }

  public KeyStates GetKeyStates(Key key) {
    KeyStates ret = (KeyStates)NoesisGUI_PINVOKE.Keyboard_GetKeyStates(swigCPtr, (int)key);
    return ret;
  }

  public bool IsKeyDown(Key key) {
    bool ret = NoesisGUI_PINVOKE.Keyboard_IsKeyDown(swigCPtr, (int)key);
    return ret;
  }

  public bool IsKeyUp(Key key) {
    bool ret = NoesisGUI_PINVOKE.Keyboard_IsKeyUp(swigCPtr, (int)key);
    return ret;
  }

  public bool IsKeyToggled(Key key) {
    bool ret = NoesisGUI_PINVOKE.Keyboard_IsKeyToggled(swigCPtr, (int)key);
    return ret;
  }

  public UIElement Focus(UIElement element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_Focus(swigCPtr, UIElement.getCPtr(element));
    return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static RoutedEvent GotKeyboardFocusEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_GotKeyboardFocusEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_GotKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent KeyDownEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_KeyDownEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_KeyDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent KeyUpEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_KeyUpEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_KeyUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent LostKeyboardFocusEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_LostKeyboardFocusEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_LostKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewGotKeyboardFocusEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_PreviewGotKeyboardFocusEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_PreviewGotKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewKeyDownEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_PreviewKeyDownEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_PreviewKeyDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewKeyUpEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_PreviewKeyUpEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_PreviewKeyUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewLostKeyboardFocusEvent {
    set {
      NoesisGUI_PINVOKE.Keyboard_PreviewLostKeyboardFocusEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_PreviewLostKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public ModifierKeys Modifiers {
    get {
      ModifierKeys ret = (ModifierKeys)NoesisGUI_PINVOKE.Keyboard_Modifiers_get(swigCPtr);
      return ret;
    } 
  }

  public UIElement FocusedElement {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Keyboard_FocusedElement_get(swigCPtr);
      return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Keyboard_GetStaticType();
    return ret;
  }

}

}

