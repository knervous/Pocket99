//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class StreamGeometryContext : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StreamGeometryContext(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(StreamGeometryContext obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~StreamGeometryContext() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_StreamGeometryContext(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
    }
  }

  public virtual void Dispose() {
    DisposeCore();
  }

  private void DisposeCore() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        CloseCore();
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_StreamGeometryContext(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  private void VerifyApi() {
    if (swigCPtr.Handle == IntPtr.Zero) {
      throw new ObjectDisposedException("StreamGeometryContext");
    }
  }

  public void Close() {
    VerifyApi();
    DisposeCore();
  }

  public void BeginFigure(Point startPoint, bool isFilled, bool isClosed) {
    VerifyApi();
    BeginFigureHelper(startPoint, isClosed);
  }

  public void LineTo(Point point, bool isStroked, bool isSmoothJoin) {
    VerifyApi();
    LineToHelper(point);
  }

  public void QuadraticBezierTo(Point point1, Point point2, bool isStroked, bool isSmoothJoin) {
    VerifyApi();
    QuadraticBezierToHelper(point1, point2);
  }

  public void BezierTo(Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin) {
    VerifyApi();
    BezierToHelper(point1, point2, point3);
  }

  public void PolyLineTo(IList<Point> points, bool isStroked, bool isSmoothJoin) {
    VerifyApi();
    int numPoints = points.Count;
    for (int i = 0; i < numPoints; ++i) {
      Point point = points[i];
      LineToHelper(point);
    }
  }

  public void PolyQuadraticBezierTo(IList<Point> points, bool isStroked, bool isSmoothJoin) {
    VerifyApi();
    int numPoints = points.Count;
    numPoints -= numPoints % 2;
    if (numPoints == 0) return;
    for (int i = 0; i < numPoints; i += 2) {
      Point point1 = points[i];
      Point point2 = points[i + 1];
      QuadraticBezierToHelper(point1, point2);
    }
  }

  public void PolyBezierTo(IList<Point> points, bool isStroked, bool isSmoothJoin) {
    VerifyApi();
    int numPoints = points.Count;
    numPoints -= numPoints % 3;
    if (numPoints == 0) return;
    for (int i = 0; i < numPoints; i += 3) {
      Point point1 = points[i];
      Point point2 = points[i + 1];
      Point point3 = points[i + 2];
      BezierToHelper(point1, point2, point3);
    }
  }

  public void ArcTo(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin) {
    VerifyApi();
    ArcToHelper(point, size, rotationAngle, isLargeArc, sweepDirection);
  }

  private void CloseCore() {
    NoesisGUI_PINVOKE.StreamGeometryContext_CloseCore(swigCPtr);
  }

  private void BeginFigureHelper(Point startPoint, bool isClosed) {
    NoesisGUI_PINVOKE.StreamGeometryContext_BeginFigureHelper(swigCPtr, ref startPoint, isClosed);
  }

  private void LineToHelper(Point point) {
    NoesisGUI_PINVOKE.StreamGeometryContext_LineToHelper(swigCPtr, ref point);
  }

  private void QuadraticBezierToHelper(Point point1, Point point2) {
    NoesisGUI_PINVOKE.StreamGeometryContext_QuadraticBezierToHelper(swigCPtr, ref point1, ref point2);
  }

  private void BezierToHelper(Point point1, Point point2, Point point3) {
    NoesisGUI_PINVOKE.StreamGeometryContext_BezierToHelper(swigCPtr, ref point1, ref point2, ref point3);
  }

  private void ArcToHelper(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection) {
    NoesisGUI_PINVOKE.StreamGeometryContext_ArcToHelper(swigCPtr, ref point, ref size, rotationAngle, isLargeArc, (int)sweepDirection);
  }

}

}

