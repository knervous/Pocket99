//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections;

namespace Noesis
{

public class ItemsControl : Control {
  internal new static ItemsControl CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new ItemsControl(cPtr, cMemoryOwn);
  }

  internal ItemsControl(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ItemsControl obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  DependencyObject ContainerFromElement(DependencyObject element) {
    return Get_ContainerFromElement(element);
  }

  public IEnumerable ItemsSource {
    get {
      return (IEnumerable)Get_ItemsSource();
    }
    set {
      Set_ItemsSource(value);
    }
  }

  public ItemsControl() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(ItemsControl).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_ItemsControl();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public static int GetAlternationIndex(DependencyObject element) {
    int ret = NoesisGUI_PINVOKE.ItemsControl_GetAlternationIndex(DependencyObject.getCPtr(element));
    return ret;
  }

  public static ItemsControl ItemsControlFromItemContainer(DependencyObject container) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemsControlFromItemContainer(DependencyObject.getCPtr(container));
    return (ItemsControl)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static DependencyObject ContainerFromElement(ItemsControl itemsControl, DependencyObject element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ContainerFromElement__SWIG_0(ItemsControl.getCPtr(itemsControl), DependencyObject.getCPtr(element));
    return (DependencyObject)Noesis.Extend.GetProxy(cPtr, false);
  }

  public static ItemsControl GetItemsOwner(DependencyObject itemsHost) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_GetItemsOwner(DependencyObject.getCPtr(itemsHost));
    return (ItemsControl)Noesis.Extend.GetProxy(cPtr, false);
  }

  public bool IsItemItsOwnContainer(object item) {
    bool ret = NoesisGUI_PINVOKE.ItemsControl_IsItemItsOwnContainer(swigCPtr, Noesis.Extend.GetInstanceHandle(item));
    return ret;
  }

  public static DependencyProperty AlternationCountProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_AlternationCountProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty AlternationIndexProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_AlternationIndexProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty DisplayMemberPathProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_DisplayMemberPathProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HasItemsProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_HasItemsProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ItemContainerStyleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemContainerStyleProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ItemsPanelProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemsPanelProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ItemsSourceProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemsSourceProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ItemTemplateProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemTemplateProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ItemTemplateSelectorProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemTemplateSelectorProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public int AlternationCount {
    set {
      NoesisGUI_PINVOKE.ItemsControl_AlternationCount_set(swigCPtr, value);
    } 
    get {
      int ret = NoesisGUI_PINVOKE.ItemsControl_AlternationCount_get(swigCPtr);
      return ret;
    } 
  }

  public string DisplayMemberPath {
    set {
      NoesisGUI_PINVOKE.ItemsControl_DisplayMemberPath_set(swigCPtr, value != null ? value : string.Empty);
    }
    get {
      IntPtr strPtr = NoesisGUI_PINVOKE.ItemsControl_DisplayMemberPath_get(swigCPtr);
      string str = Noesis.Extend.StringFromNativeUtf8(strPtr);
      return str;
    }
  }

  public bool HasItems {
    get {
      bool ret = NoesisGUI_PINVOKE.ItemsControl_HasItems_get(swigCPtr);
      return ret;
    } 
  }

  public ItemContainerGenerator ItemContainerGenerator {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemContainerGenerator_get(swigCPtr);
      ItemContainerGenerator ret = (cPtr == IntPtr.Zero) ? null : new ItemContainerGenerator(cPtr, false);
      return ret;
    } 
  }

  public Style ItemContainerStyle {
    set {
      NoesisGUI_PINVOKE.ItemsControl_ItemContainerStyle_set(swigCPtr, Style.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemContainerStyle_get(swigCPtr);
      return (Style)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public ItemsPanelTemplate ItemsPanel {
    set {
      NoesisGUI_PINVOKE.ItemsControl_ItemsPanel_set(swigCPtr, ItemsPanelTemplate.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemsPanel_get(swigCPtr);
      return (ItemsPanelTemplate)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public DataTemplate ItemTemplate {
    set {
      NoesisGUI_PINVOKE.ItemsControl_ItemTemplate_set(swigCPtr, DataTemplate.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemTemplate_get(swigCPtr);
      return (DataTemplate)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public DataTemplateSelector ItemTemplateSelector {
    set {
      NoesisGUI_PINVOKE.ItemsControl_ItemTemplateSelector_set(swigCPtr, DataTemplateSelector.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_ItemTemplateSelector_get(swigCPtr);
      return (DataTemplateSelector)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public ItemCollection Items {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_Items_get(swigCPtr);
      return (ItemCollection)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  private DependencyObject Get_ContainerFromElement(DependencyObject element) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_Get_ContainerFromElement(swigCPtr, DependencyObject.getCPtr(element));
    return (DependencyObject)Noesis.Extend.GetProxy(cPtr, false);
  }

  private object Get_ItemsSource() {
    IntPtr cPtr = NoesisGUI_PINVOKE.ItemsControl_Get_ItemsSource(swigCPtr);
    return Noesis.Extend.GetProxy(cPtr, false);
  }

  private void Set_ItemsSource(object items) {
    NoesisGUI_PINVOKE.ItemsControl_Set_ItemsSource(swigCPtr, Noesis.Extend.GetInstanceHandle(items));
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.ItemsControl_GetStaticType();
    return ret;
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_ItemsControl(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

