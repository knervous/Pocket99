//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Geometry : Animatable {
  internal new static Geometry CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Geometry(cPtr, cMemoryOwn);
  }

  internal Geometry(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Geometry obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Geometry() {
  }

  public Rect Bounds {
    get {
      Rect bounds;
      GetBoundsHelper(out bounds);
      return bounds;
    }
  }

  public static Geometry Parse(string source) {
    IntPtr cPtr = Geometry.ParseHelper(source);
    return (Geometry)Noesis.Extend.GetProxy(cPtr, true);
  }

  public virtual bool IsEmpty() {
    bool ret = NoesisGUI_PINVOKE.Geometry_IsEmpty(swigCPtr);
    return ret;
  }

  public Rect GetRenderBounds(Pen pen) {
    IntPtr ret = NoesisGUI_PINVOKE.Geometry_GetRenderBounds(swigCPtr, Pen.getCPtr(pen));
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Rect>(ret);
    }
    else {
      return new Rect();
    }
  }

  public bool FillContains(Point point) {
    bool ret = NoesisGUI_PINVOKE.Geometry_FillContains(swigCPtr, ref point);
    return ret;
  }

  public bool StrokeContains(Pen pen, Point point) {
    bool ret = NoesisGUI_PINVOKE.Geometry_StrokeContains(swigCPtr, Pen.getCPtr(pen), ref point);
    return ret;
  }

  public static DependencyProperty TransformProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Geometry_TransformProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Transform Transform {
    set {
      NoesisGUI_PINVOKE.Geometry_Transform_set(swigCPtr, Transform.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Geometry_Transform_get(swigCPtr);
      return (Transform)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  private void GetBoundsHelper(out Rect bounds) {
    NoesisGUI_PINVOKE.Geometry_GetBoundsHelper(swigCPtr, out bounds);
  }

  private static IntPtr ParseHelper(string str) {
    IntPtr ret = NoesisGUI_PINVOKE.Geometry_ParseHelper(str != null ? str : string.Empty);
    return ret;
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Geometry_GetStaticType();
    return ret;
  }

}

}

