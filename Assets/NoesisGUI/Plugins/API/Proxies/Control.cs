//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Control : FrameworkElement {
  internal new static Control CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Control(cPtr, cMemoryOwn);
  }

  internal Control(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Control obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Events
  public event MouseButtonEventHandler MouseDoubleClick {
    add {
      AddHandler(MouseDoubleClickEvent, value);
    }
    remove {
      RemoveHandler(MouseDoubleClickEvent, value);
    }
  }

  public event MouseButtonEventHandler PreviewMouseDoubleClick {
    add {
      AddHandler(PreviewMouseDoubleClickEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseDoubleClickEvent, value);
    }
  }

  #endregion

  public Control() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if ((object)type.TypeHandle == typeof(Control).TypeHandle) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_Control();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public static DependencyProperty BackgroundProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_BackgroundProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty BorderBrushProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_BorderBrushProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty BorderThicknessProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_BorderThicknessProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty FontFamilyProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontFamilyProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty FontSizeProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontSizeProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty FontStretchProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontStretchProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty FontStyleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontStyleProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty FontWeightProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontWeightProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ForegroundProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_ForegroundProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty HorizontalContentAlignmentProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_HorizontalContentAlignmentProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsTabStopProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_IsTabStopProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty PaddingProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_PaddingProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty TabIndexProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_TabIndexProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty TemplateProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_TemplateProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty VerticalContentAlignmentProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_VerticalContentAlignmentProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsFocusEngagedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_IsFocusEngagedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsFocusEngagementEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_IsFocusEngagementEnabledProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty SupportsFocusEngagementProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_SupportsFocusEngagementProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseDoubleClickEvent {
    set {
      NoesisGUI_PINVOKE.Control_MouseDoubleClickEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_MouseDoubleClickEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseDoubleClickEvent {
    set {
      NoesisGUI_PINVOKE.Control_PreviewMouseDoubleClickEvent_set(RoutedEvent.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_PreviewMouseDoubleClickEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Brush Background {
    set {
      NoesisGUI_PINVOKE.Control_Background_set(swigCPtr, Brush.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_Background_get(swigCPtr);
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Brush BorderBrush {
    set {
      NoesisGUI_PINVOKE.Control_BorderBrush_set(swigCPtr, Brush.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_BorderBrush_get(swigCPtr);
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Thickness BorderThickness {
    set {
      NoesisGUI_PINVOKE.Control_BorderThickness_set(swigCPtr, ref value);
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.Control_BorderThickness_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Thickness>(ret);
      }
      else {
        return new Thickness();
      }
    }

  }

  public FontFamily FontFamily {
    set {
      NoesisGUI_PINVOKE.Control_FontFamily_set(swigCPtr, FontFamily.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_FontFamily_get(swigCPtr);
      return (FontFamily)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float FontSize {
    set {
      NoesisGUI_PINVOKE.Control_FontSize_set(swigCPtr, value);
    } 
    get {
      float ret = NoesisGUI_PINVOKE.Control_FontSize_get(swigCPtr);
      return ret;
    } 
  }

  public FontStretch FontStretch {
    set {
      NoesisGUI_PINVOKE.Control_FontStretch_set(swigCPtr, (int)value);
    } 
    get {
      FontStretch ret = (FontStretch)NoesisGUI_PINVOKE.Control_FontStretch_get(swigCPtr);
      return ret;
    } 
  }

  public FontStyle FontStyle {
    set {
      NoesisGUI_PINVOKE.Control_FontStyle_set(swigCPtr, (int)value);
    } 
    get {
      FontStyle ret = (FontStyle)NoesisGUI_PINVOKE.Control_FontStyle_get(swigCPtr);
      return ret;
    } 
  }

  public FontWeight FontWeight {
    set {
      NoesisGUI_PINVOKE.Control_FontWeight_set(swigCPtr, (int)value);
    } 
    get {
      FontWeight ret = (FontWeight)NoesisGUI_PINVOKE.Control_FontWeight_get(swigCPtr);
      return ret;
    } 
  }

  public Brush Foreground {
    set {
      NoesisGUI_PINVOKE.Control_Foreground_set(swigCPtr, Brush.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_Foreground_get(swigCPtr);
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public HorizontalAlignment HorizontalContentAlignment {
    set {
      NoesisGUI_PINVOKE.Control_HorizontalContentAlignment_set(swigCPtr, (int)value);
    } 
    get {
      HorizontalAlignment ret = (HorizontalAlignment)NoesisGUI_PINVOKE.Control_HorizontalContentAlignment_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsTabStop {
    set {
      NoesisGUI_PINVOKE.Control_IsTabStop_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.Control_IsTabStop_get(swigCPtr);
      return ret;
    } 
  }

  public Thickness Padding {
    set {
      NoesisGUI_PINVOKE.Control_Padding_set(swigCPtr, ref value);
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.Control_Padding_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Thickness>(ret);
      }
      else {
        return new Thickness();
      }
    }

  }

  public int TabIndex {
    set {
      NoesisGUI_PINVOKE.Control_TabIndex_set(swigCPtr, value);
    } 
    get {
      int ret = NoesisGUI_PINVOKE.Control_TabIndex_get(swigCPtr);
      return ret;
    } 
  }

  public ControlTemplate Template {
    set {
      NoesisGUI_PINVOKE.Control_Template_set(swigCPtr, ControlTemplate.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Control_Template_get(swigCPtr);
      return (ControlTemplate)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public VerticalAlignment VerticalContentAlignment {
    set {
      NoesisGUI_PINVOKE.Control_VerticalContentAlignment_set(swigCPtr, (int)value);
    } 
    get {
      VerticalAlignment ret = (VerticalAlignment)NoesisGUI_PINVOKE.Control_VerticalContentAlignment_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsFocusEngaged {
    set {
      NoesisGUI_PINVOKE.Control_IsFocusEngaged_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.Control_IsFocusEngaged_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsFocusEngagementEnabled {
    set {
      NoesisGUI_PINVOKE.Control_IsFocusEngagementEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.Control_IsFocusEngagementEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool SupportsFocusEngagement {
    set {
      NoesisGUI_PINVOKE.Control_SupportsFocusEngagement_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.Control_SupportsFocusEngagement_get(swigCPtr);
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Control_GetStaticType();
    return ret;
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_Control(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

