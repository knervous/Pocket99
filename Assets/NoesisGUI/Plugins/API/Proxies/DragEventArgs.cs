//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class DragEventArgs : RoutedEventArgs {
  private HandleRef swigCPtr;

  internal DragEventArgs(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DragEventArgs obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DragEventArgs() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NoesisGUI_PINVOKE.delete_DragEventArgs(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal static new void InvokeHandler(Delegate handler, IntPtr sender, IntPtr args) {
    DragEventHandler handler_ = (DragEventHandler)handler;
    if (handler_ != null) {
      handler_(Extend.GetProxy(sender, false), new DragEventArgs(args, false));
    }
  }

  public object Data {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.DragEventArgs_Data_get(swigCPtr);
      return Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public uint KeyStates {
    get {
      uint ret = NoesisGUI_PINVOKE.DragEventArgs_KeyStates_get(swigCPtr);
      return ret;
    } 
  }

  public uint AllowedEffects {
    get {
      uint ret = NoesisGUI_PINVOKE.DragEventArgs_AllowedEffects_get(swigCPtr);
      return ret;
    } 
  }

  public uint Effects {
    set {
      NoesisGUI_PINVOKE.DragEventArgs_Effects_set(swigCPtr, value);
    }
    get {
      uint ret = NoesisGUI_PINVOKE.DragEventArgs_Effects_get(swigCPtr);
      return ret;
    } 
  }

  public Point GetPosition(UIElement relativeTo) {
    IntPtr ret = NoesisGUI_PINVOKE.DragEventArgs_GetPosition(swigCPtr, UIElement.getCPtr(relativeTo));
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<Point>(ret);
    }
    else {
      return new Point();
    }
  }

  public DragEventArgs(object source, RoutedEvent arg1, object data, uint dragDropKeyStates, uint allowedEffects, UIElement target, Point point) : this(NoesisGUI_PINVOKE.new_DragEventArgs(Noesis.Extend.GetInstanceHandle(source), RoutedEvent.getCPtr(arg1), Noesis.Extend.GetInstanceHandle(data), dragDropKeyStates, allowedEffects, UIElement.getCPtr(target), ref point), true) {
  }

}

}

